'''
Хайку — жанр традиционной японской лирической поэзии века, известный с XIV века.
Оригинальное японское хайку состоит из 17 слогов, составляющих один столбец иероглифов.
Особыми разделительными словами — кирэдзи — текст хайку делится на части из 5, 7 и снова 5 слогов.
При переводе хайку на западные языки традиционно вместо разделительного слова использую разрыв строки и,
таким образом, хайку записываются как трёхстишия.

Перед вами трёхстишия, которые претендуют на то, чтобы быть хайку.
В качестве разделителя строк используются символы / .
Если разделители делят текст на строки, в которых 5/7/5 слогов, то выведите «Хайку!».
Если число строк не равно 3, то выведите строку «Не хайку. Должно быть 3 строки.»
Иначе выведите строку вида «Не хайку. В i строке слогов не s, а j.», где строка i — самая ранняя,
в которой количество слогов неправильное.

Для простоты будем считать, что слогов ровно столько же, сколько гласных, не задумываясь о тонкостях.
'''
import re

def haiku(text):
    lines = re.split(r'/', text)
    if len(lines) != 3:
        return 'Не хайку. Должно быть 3 строки.'

    for i, c in enumerate((5, 7, 5)):
        syllables = len(re.findall(r'[АаУуОоЫыИиЭэЯяЮюЁёЕе]', lines[i]))
        if syllables != c:
            return f'Не хайку. В {i + 1} строке слогов не {c}, а {syllables}.'

    return 'Хайку!'

assert haiku('Вечер за окном. / Еще один день прожит. / Жизнь скоротечна...') == 'Хайку!'
assert haiku('Просто текст') == 'Не хайку. Должно быть 3 строки.'
assert haiku('Как вишня расцвела! / Она с коня согнала / И князя-гордеца.') == 'Не хайку. В 1 строке слогов не 5, а 6.'
assert haiku('На голой ветке / Ворон сидит одиноко… / Осенний вечер!') == 'Не хайку. В 2 строке слогов не 7, а 8.'
assert haiku('Тихо, тихо ползи, / Улитка, по склону Фудзи, / Вверх, до самых высот!') == 'Не хайку. В 1 строке слогов не 5, а 6.'
assert haiku('Жизнь скоротечна… / Думает ли об этом / Маленький мальчик.') == 'Хайку!'

print('Тесты прошел!')
